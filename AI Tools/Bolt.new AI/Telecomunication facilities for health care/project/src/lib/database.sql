-- Enable RLS
alter table public.appointment_types enable row level security;
alter table public.appointments enable row level security;

-- Create doctor_profiles table
create table if not exists public.doctor_profiles (
    id uuid references auth.users(id) primary key,
    specialization text not null,
    qualification text not null,
    years_of_experience integer not null,
    license_number text not null unique,
    consultation_fee decimal(10,2) not null,
    available_days text[] not null,
    working_hours jsonb not null default '{"start": "09:00", "end": "21:00"}',
    created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Enable RLS on doctor_profiles
alter table public.doctor_profiles enable row level security;

-- RLS policies for doctor_profiles
create policy "Doctors can view own profile"
    on public.doctor_profiles for select
    using (auth.uid() = id);

create policy "Doctors can update own profile"
    on public.doctor_profiles for update
    using (auth.uid() = id);

create policy "Public can view doctor profiles"
    on public.doctor_profiles for select
    using (true);

-- Create appointment_types table
create table if not exists public.appointment_types (
    id bigint generated by default as identity primary key,
    name text not null,
    duration integer not null,
    price decimal(10,2) not null,
    doctor_id uuid references doctor_profiles(id),
    created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Create appointments table
create table if not exists public.appointments (
    id bigint generated by default as identity primary key,
    patient_id uuid references auth.users(id),
    doctor_id uuid references doctor_profiles(id),
    appointment_type_id bigint references public.appointment_types(id),
    start_time timestamp with time zone not null,
    status text check (status in ('upcoming', 'completed', 'cancelled')) default 'upcoming',
    notes text default '',
    location text not null,
    meeting_url text,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Add sample doctors
insert into auth.users (id, email, role) values
    ('d1b23c45-6789-4a0b-b1c2-3d4e5f6a7b8c', 'dr.smith@example.com', 'doctor'),
    ('e2c34d56-789a-5b1c-c2d3-4e5f6a7b8c9d', 'dr.jones@example.com', 'doctor');

-- Add doctor profiles
insert into public.doctor_profiles 
    (id, specialization, qualification, years_of_experience, license_number, consultation_fee, available_days)
values
    ('d1b23c45-6789-4a0b-b1c2-3d4e5f6a7b8c', 'General Medicine', 'MD', 15, 'LIC123456', 100.00, array['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']),
    ('e2c34d56-789a-5b1c-c2d3-4e5f6a7b8c9d', 'Cardiology', 'MD, DM', 20, 'LIC789012', 150.00, array['Monday', 'Wednesday', 'Friday']);

-- Add appointment types
insert into public.appointment_types (name, duration, price, doctor_id) values
    ('General Consultation', 30, 100.00, 'd1b23c45-6789-4a0b-b1c2-3d4e5f6a7b8c'),
    ('Follow-up Visit', 20, 75.00, 'd1b23c45-6789-4a0b-b1c2-3d4e5f6a7b8c'),
    ('Specialist Consultation', 45, 150.00, 'e2c34d56-789a-5b1c-c2d3-4e5f6a7b8c9d');

-- Add indexes for better performance
create index if not exists idx_appointments_patient on public.appointments(patient_id);
create index if not exists idx_appointments_doctor on public.appointments(doctor_id);
create index if not exists idx_appointments_date on public.appointments(start_time);
create index if not exists idx_appointments_status on public.appointments(status);